AWSTemplateFormatVersion: 2010-09-09
Description: Infrastructure for server project

Parameters:
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: pro

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  DomainName:
    Description: Please enter the domain name for the server project
    Type: String
    Default: example.com
    AllowedPattern: ^(\*\.)?(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])$

  HostedZoneId:
    Description: Please enter the Hosted Zone ID for the server project
    Type: AWS::Route53::HostedZone::Id

Resources:
  IAMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Path: /
      # PolicyName: !Sub ${EnvironmentName}-${AWS::StackName}-ImageBuilderForGitHub
      # Groups:
      #   - String
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "cloudformation:DescribeStacks"
            Resource: !Ref AWS::StackId

          - Effect: Allow
            Action:
              - "elasticloadbalancing:RegisterTargets"
              - "elasticloadbalancing:DeregisterTargets"
              - "elasticloadbalancing:DescribeTargetHealth"
            Resource: !Ref TargetGroup

          - Effect: Allow
            Action:
              - "ecr:DescribeRepositories"
              - "ecr:GetRepositoryPolicy"
              - "ecr:SetRepositoryPolicy"
              - "ecr:LambdaECRImageRetrievalPolicy"
              - "ecr:PutImage"
              - "ecr:UploadLayerPart"
              - "ecr:InitiateLayerUpload"
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:CompleteLayerUpload"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:BatchGetImage"
            Resource: !GetAtt [Repository, Arn]

          - Effect: Allow
            Action:
              - "ecr:GetAuthorizationToken"
            Resource: "*"

          - Effect: Allow
            Action:
              - "iam:PassRole"
            Resource: !GetAtt [LambdaExecutionRole, Arn]

          - Effect: Allow
            Action:
              - "lambda:CreateFunction"
              - "lambda:DeleteFunction"
              - "lambda:AddPermission"
              - "lambda:GetFunction"
            Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value:
            !Join [
              "",
              [
                !Ref AWS::StackName,
                "-vpc-",
                !Ref EnvironmentName,
                "-",
                !Ref VpcCIDR,
              ],
            ]
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: StackId
          Value: !Ref AWS::StackId

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value:
            !Join ["", [!Ref AWS::StackName, "-igw-", !Ref EnvironmentName]]
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: StackId
          Value: !Ref AWS::StackId

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            !Join [
              "",
              [
                !Ref AWS::StackName,
                "-subnet-public1-",
                !Ref EnvironmentName,
                "-",
                !Select [0, !GetAZs ""],
              ],
            ]
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: StackId
          Value: !Ref AWS::StackId

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            !Join [
              "",
              [
                !Ref AWS::StackName,
                "-subnet-public1-",
                !Ref EnvironmentName,
                "-",
                !Select [0, !GetAZs ""],
              ],
            ]
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: StackId
          Value: !Ref AWS::StackId

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: StackId
          Value: !Ref AWS::StackId

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  Repository:
    Type: AWS::ECR::Repository
    Properties:
      ImageTagMutability: IMMUTABLE
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowPullFromLambda
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
            Condition:
              ArnLike:
                "aws:SourceArn": !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Delete old images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 1
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: StackId
          Value: !Ref AWS::StackId

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: StackId
          Value: !Ref AWS::StackId

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 300
      HealthCheckPath: /health
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: lambda
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: StackId
          Value: !Ref AWS::StackId

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: InternetGatewayAttachment
    Properties:
      Scheme: internet-facing
      Type: application
      SecurityGroups:
        - !GetAtt SecurityGroup.GroupId
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: StackId
          Value: !Ref AWS::StackId

  ListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: LoadBalancer
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  ListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: LoadBalancer
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Certificates:
        - CertificateArn: !Ref Certificate

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTPS access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: StackId
          Value: !Ref AWS::StackId

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId
      SubjectAlternativeNames:
        - !Sub "*.${DomainName}"
      ValidationMethod: DNS
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: StackId
          Value: !Ref AWS::StackId

Outputs:
  IAMPolicy:
    Description: |
      IAM policy to allow access to push images to the ECR Repository
      and create lambda functions.
    Value: !Ref IAMPolicy

  RepositoryUri:
    Description: The ECR repository URI
    Value: !GetAtt [Repository, RepositoryUri]
    Export:
      Name: !Sub "${AWS::StackName}-RepositoryUri"

  RepositoryName:
    Description: The ECR repository name
    Value: !Ref Repository
    Export:
      Name: !Sub "${AWS::StackName}-RepositoryName"

  RepositoryArn:
    Description: The ECR repository ARN
    Value: !GetAtt [Repository, Arn]
    Export:
      Name: !Sub "${AWS::StackName}-RepositoryArn"

  TargetGroupArn:
    Description: The target group ARN
    Value: !Ref TargetGroup
    Export:
      Name: !Sub "${AWS::StackName}-TargetGroupArn"

  LambdaExecutionRoleArn:
    Description: The Lambda execution role name
    Value: !GetAtt [LambdaExecutionRole, Arn]
    Export:
      Name: !Sub "${AWS::StackName}-LambdaExecutionRole"
