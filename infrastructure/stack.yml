AWSTemplateFormatVersion: 2010-09-09
Description: Infrastructure for server project

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: production

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  # PrivateSubnet1CIDR:
  #   Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
  #   Type: String
  #   Default: 10.192.20.0/24

  # PrivateSubnet2CIDR:
  #   Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
  #   Type: String
  #   Default: 10.192.21.0/24

Resources:
  ServerRepository:
    Type: AWS::ECR::Repository
    Properties:
      ImageTagMutability: IMMUTABLE

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  # PrivateSubnet1:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref VPC
  #     AvailabilityZone: !Select [ 0, !GetAZs  '' ]
  #     CidrBlock: !Ref PrivateSubnet1CIDR
  #     MapPublicIpOnLaunch: false
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  # PrivateSubnet2:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref VPC
  #     AvailabilityZone: !Select [ 1, !GetAZs  '' ]
  #     CidrBlock: !Ref PrivateSubnet2CIDR
  #     MapPublicIpOnLaunch: false
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ServerSecurityGroup
      GroupDescription: Allow HTTPS access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  MyLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt [LambdaFunction, Arn]
      Action: "lambda:InvokeFunction"
      Principal: elasticloadbalancing.amazonaws.com

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: false
      TargetType: lambda
      Targets:
        - Id: !GetAtt [LambdaFunction, Arn]

Outputs:
  ECR_REPOSITORY:
    Description: The ECR repository ARN
    Value: !Ref ServerRepository
